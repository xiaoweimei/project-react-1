{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","localStore.js","serviceWorker.js","index.js"],"names":["TodoInput","react_default","a","createElement","type","value","this","props","content","className","placeholder","onChange","changeTitle","bind","onKeyPress","submit","e","console","log","key","onSubmit","React","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onDelete","onToggle","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","todoList","JSON","parse","window","localStorage","getItem","time","Date","toLocaleTimeString","setInterval","setState","event","deleted","setItem","stringify","target","push","id","idMaker","_this2","todos","filter","item","map","index","TodoItem_TodoItem","toString","match","TodoInput_TodoInput","addTodo","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea9b3589.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TodoInput.css'\r\n\r\nexport default class TodoInput extends React.Component{\r\n\trender(){\r\n\t\treturn <input type=\"text\" value={this.props.content} \r\n\t\t\tclassName='TodoInput' placeholder='请输入你的待办事情'\r\n\t\t\tonChange={this.changeTitle.bind(this)}\r\n\t\t\tonKeyPress={this.submit.bind(this)}/>\r\n\t}\r\n\tsubmit(e){\r\n\t\tconsole.log(e)\r\n\t\tif(e.key===\"Enter\"){\r\n\t\t\tthis.props.onSubmit(e)\r\n\t\t}\r\n\t}\r\n\tchangeTitle(e){\r\n\t\tthis.props.onChange(e)\r\n\t}\r\n}","import React from 'react';\r\nimport './TodoItem.css'\r\nexport default class TodoItem extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"TodoItem\">\r\n\t\t\t\t<input type='checkbox' checked={this.props.todo.status==='completed'}\r\n\t\t\t\tonChange={this.toggle.bind(this)} />\r\n\t\t\t\t<span className=\"title\">{this.props.todo.title}</span>\r\n\t\t\t\t<button onClick={this.delete.bind(this)}>删除</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\tdelete(e){\r\n\t\tthis.props.onDelete(e,this.props.todo)\r\n\t}\r\n\ttoggle(e){\r\n\t\tthis.props.onToggle(e,this.props.todo)\r\n\t}\r\n}","import React from 'react';\nimport TodoInput from './TodoInput';\nimport TodoItem from './TodoItem';\nimport './reset.css';\nimport './App.css';\nimport * as localStore from './localStore'\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      newTodo:'',\n      todoList:localStore.load('todoList') || [],\n      time:new Date().toLocaleTimeString()\n    }\n    setInterval(()=>{\n      this.setState({\n      })\n    },1000)\n  }\n  delete(event,todo){\n    todo.deleted=true\n    this.setState(this.state)\n  }\n  componentDidUpdate(){\n    localStore.save('todoList',this.state.todoList)\n  }\n  toggle(e,todo){\n    todo.status=todo.status==='completed'?'':'completed'\n    this.setState(this.state)\n  }\n  changeTitle(event){\n    this.setState({\n      newTodo:event.target.value,\n      todoList:this.state.todoList\n    })\n  }\n  addTodo(event){\n    if(!event.target.value){return}\n    console.log('我得添加一个todo了')\n    this.state.todoList.push({\n      id:idMaker(),\n      title:event.target.value,\n      status:null,\n      deleted:false\n    })\n    this.setState({\n      newTodo:'',\n      todoList:this.state.todoList\n    })\n  }\n  render(){\n    let todos=this.state.todoList\n      .filter((item)=>!item.deleted)\n      .map((item,index)=>{\n      return (\n        <li key={index}>\n          <TodoItem todo={item} onToggle={this.toggle.bind(this)}\n            onDelete={this.delete.bind(this)}/>\n        </li>\n        )\n    })\n    console.log(todos)\n    return (\n      <div className='App'>\n        <div className=\"time\" >当前时间<br />{new Date().toString().match(/[0-9]{2}:[0-9]{2}:[0-9]{2}/)[0]}</div>\n        <h1>我的备忘录</h1>\n        <div className='inputWrapper'>\n          <TodoInput content={this.state.newTodo}\n            onChange={this.changeTitle.bind(this)}\n            onSubmit={this.addTodo.bind(this)}/>\n          <ol className=\"todoList\">\n            {todos}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\nlet id=0\nfunction idMaker(){\n  id+=1\n  return id\n}\n\nexport default App;\n","export function save(key,value){\r\n\treturn window.localStorage.setItem(key,JSON.stringify(value))\r\n}\r\n\r\nexport function load(key){\r\n\treturn JSON.parse(window.localStorage.getItem(key))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// function tick(){\n// \tconst element=(\n// \t\t<div>\n// \t\t\t<h1>Hello,world!</h1>\n// \t\t\t<h2>It is {new Date().toLocaleTimeString()}.</h2>\n// \t\t</div>\n// \t);\n// \tReactDOM.render(element,document.getElementById('root'))\n// }\n// setInterval(tick,1000)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}